<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="14.0">
	<Import Project="Default.props"/>

	<PropertyGroup>
		<Root>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)\..'))</Root>
		<Nuget>https://dist.nuget.org/win-x86-commandline/v4.9.4/nuget.exe</Nuget>
		<SevenZipNuget>7-Zip.CommandLine</SevenZipNuget>
		<SevenZipVer>18.1.0</SevenZipVer>
		<SevenZipPath>7-Zip.CommandLine.$(SevenZipVer)\tools\x64\7za.exe</SevenZipPath>

		<BoostBuilderUrl>https://github.com/glen-summers/BoostModularBuild/tarball/v1.0</BoostBuilderUrl>
		<BoostBuilderName>glen-summers-BoostModularBuild-c5050ff</BoostBuilderName>
	</PropertyGroup>

	<PropertyGroup>
		<Solution>$(Root)\msvc\GLib.sln</Solution>
		<Source>$(Root)</Source>
		<MajorVersion>1</MajorVersion>
		<MinorVersion>0</MinorVersion>
		<FileBuildNumber>0</FileBuildNumber>
		<Configuration>Release</Configuration>
		<CMakeConfiguration>RelWithDebInfo</CMakeConfiguration>
		<Platform>x64</Platform>
		<BuildInParallel>true</BuildInParallel>
		<TestProject>Tests</TestProject>
	</PropertyGroup>

	<PropertyGroup>
		<Out>$(Root)\out</Out>
		<PlatformOut>$(Out)\$(Platform)</PlatformOut>
		<Temp>$(PlatformOut)\temp</Temp>
		<OutputPath>$(PlatformOut)\$(Configuration)</OutputPath>
		<TestExecutable>$(OutputPath)\$(TestProject).exe</TestExecutable>
		<DebugTestExecutable>$(PlatformOut)\Debug\$(TestProject).exe</DebugTestExecutable>
		<CoverageExecutable>$(OutputPath)\Coverage.exe</CoverageExecutable>
		<Downloads>$(Out)\downloads</Downloads>

		<CoverageInclude>$(Root)\</CoverageInclude>
		<CoverageExclude>-x $(Root)\Tests\ -x $(Root)\TestApp\</CoverageExclude>
	</PropertyGroup>

	<Target Name="MakeTempDir">
		<MakeDir Directories="$(Temp)"/>
	</Target>

	<Target Name="Clean">
		<ItemGroup>
			<FileToDelete Include="$(Out)/**/*"/>
			<FileToDelete Include="$(Source)/**/Debug/**/*"/>
			<FileToDelete Include="$(Source)/**/Release/**/*"/>
			<FileToDelete Include="$(Source)/**/ipch/**/*"/>
			<FileToDelete Include="$(Source)/lib/*"/>
		</ItemGroup>
		<Delete Files="@(FileToDelete)" ContinueOnError="WarnAndContinue"/>

		<ItemGroup>
			<Directories Include="$([System.IO.Directory]::GetDirectories('$(Source)', '*', System.IO.SearchOption.AllDirectories))" />
			<Directories>
				<Files>$([System.IO.Directory]::GetFiles("%(Directories.Identity)", "*", System.IO.SearchOption.AllDirectories).get_Length())</Files>
			</Directories>
		</ItemGroup>
		<RemoveDir Directories="@(Directories)" Condition="%(Files)=='0'" />
	</Target>

	<Target Name="Deps" DependsOnTargets="DownloadTools">
		<PropertyGroup>
			<BoostBuilderTar>$(Downloads)\BoostModularBuild.tar.gz</BoostBuilderTar>
			<OutDir>$(Downloads)\Deps</OutDir>
			<Go>$(Downloads)\Deps\$(BoostBuilderName)\go.cmd</Go>
		</PropertyGroup>

		<DownloadFile Condition="!Exists($(BoostBuilderTar))" Address="$(BoostBuilderUrl)" FileName="$(BoostBuilderTar)"/>
		<Exec Condition="!Exists($(Go))" Command="$(SevenZip) x $(BoostBuilderTar) -so | $(SevenZip) x -aoa -si -ttar -o$(OutDir)"/>
		<Exec Command="$(Go) build test $(Out)"/>
	</Target>

	<Target Name="Restore"/>

	<Target Name="Compile" DependsOnTargets="Restore">
		<ItemGroup>
			<Properties Remove="@(Properties)"/>
			<Properties Include="Configuration=$(Configuration)"/>
			<Properties Include="OutDir=$(OutputPath)\"/>
			<Properties Include="Platform=$(Platform)"/>
			<Properties Include="@(CustomProperties)"/>
		</ItemGroup>
		<MSBuild Projects="$(Solution)" Properties="@(Properties)" BuildInParallel="$(BuildInParallel)"/>
	</Target>

	<Target Name="CompileTests">
		<ItemGroup>
			<Properties Remove="@(Properties)"/>
			<Properties Include="Configuration=$(Configuration)"/>
			<Properties Include="OutDir=$(OutputPath)\"/>
			<Properties Include="Platform=$(Platform)"/>
			<Properties Include="@(CustomProperties)"/>
		</ItemGroup>
		<MSBuild Projects="$(Solution)" Properties="@(Properties)" Targets="Tests"/>
	</Target>

	<!--32bit...
	<Target Name="CompileX86">
		<MSBuild Condition="'$(Platform)'!='x86'" Projects="$(MSBuildProjectFile)" Targets="Compile" Properties="Platform=x86"/>
	</Target>-->

	<Target Name="Test" DependsOnTargets="Compile">
		<Exec command="$(TestExecutable)"/>
	</Target>

	<Target Name="Build" DependsOnTargets="Compile;Test"/>

	<Target Name="BuildDebug">
		<MSBuild Projects="$(MSBuildProjectFile)" Targets="Build" Properties="Configuration=Debug"/>
	</Target>

	<Target Name="BuildX86">
		<MSBuild Condition="'$(Platform)'!='x86'" Projects="$(MSBuildProjectFile)" Targets="Build" Properties="Platform=x86"/>
	</Target>

	<!--cmake-->
	<PropertyGroup>
		<CMakeRootDir>$(vsInstallationPath)\Common7\IDE\CommonExtensions\Microsoft\CMake</CMakeRootDir>
		<CMake>"$(CMakeRootDir)\CMake\bin\cmake.exe"</CMake>
		<CTest>"$(CMakeRootDir)\CMake\bin\ctest.exe"</CTest>
		<Ninja>"$(CMakeRootDir)\Ninja\ninja.exe"</Ninja>

		<CMakeBuildDir>$(Out)\cmake\build\$(Platform)-$(CMakeConfiguration)</CMakeBuildDir>
		<CMakeInstallDir>$(Out)\cmake\install\$(Platform)-$(CMakeConfiguration)</CMakeInstallDir>
	</PropertyGroup>

	<Target Name="CMake">
		<MakeDir Directories="$(CMakeBuildDir)"/>
		<Exec Command='$(CMake) -G "Ninja" -DCMAKE_INSTALL_PREFIX:PATH="$(CMakeInstallDir)" -DCMAKE_BUILD_TYPE="$(CMakeConfiguration)" -DCMAKE_MAKE_PROGRAM=$(Ninja) $(Root)'
			WorkingDirectory="$(CMakeBuildDir)"/>
		<Exec Command="$(CMake) --build $(CMakeBuildDir) --config $(CMakeConfiguration) -- -v"/>
		<!-- <Exec Command="set CTEST_OUTPUT_ON_FAILURE=1 &amp;&amp; $(CMake) - -build $(CMakeBuildDir) - -config $(CMakeConfiguration) - -target test"/> -->
		<Exec Command="set CTEST_OUTPUT_ON_FAILURE=1 &amp;&amp; $(CTest) -VV" WorkingDirectory="$(CMakeBuildDir)"/>
		<Exec Command="$(CMake) --build $(CMakeBuildDir) --config $(CMakeConfiguration) --target install"/>
	</Target>

	<Target Name="Wsl">
		<Exec Command="wsl.exe ./go.sh" WorkingDirectory="$(Root)"/>
	</Target>

	<Target Name="WslCoverage">
		<Exec Command="wsl.exe ./go.sh coverage" WorkingDirectory="$(Root)"/>
		<Exec Command="start $(Out)\cmake\build\Debug\TestsCoverage\index.html"/>
	</Target>

	<Target Name="All" DependsOnTargets="Build;BuildX86;CMake;Wsl"/>

	<UsingTask TaskName="DownloadFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
		<ParameterGroup>
			<Address ParameterType="System.String" Required="true"/>
			<FileName ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Reference Include="System" />
			<Code Type="Fragment" Language="cs"><![CDATA[new System.Net.WebClient().DownloadFile(Address, FileName);]]>
			</Code>
		</Task>
	</UsingTask>

	<Target Name="DownloadTools">
		<MakeDir Directories="$(Downloads)"/>
		<DownloadFile Condition="!Exists($(Nuget))" Address="$(Nuget)" FileName="$(Downloads)\nuget.exe" />

		<CreateProperty Value="$(Downloads)\$(SevenZipPath)">
			<Output TaskParameter="Value" PropertyName="SevenZip"/>
		</CreateProperty>
		<Exec Condition="!Exists($(SevenZip))" Command="nuget.exe install $(SevenZipNuget) -version $(SevenZipVer)"
			WorkingDirectory="$(Downloads)"/>
	</Target>

	<Target Name="Coverage" DependsOnTargets="Compile">
		<MSBuild Projects="$(MSBuildProjectFile)" Targets="CompileTests" Properties="Configuration=Debug"/>
		<Exec Command="$(CoverageExecutable) $(DebugTestExecutable) $(Out)\HtmlReport -i $(CoverageInclude) $(CoverageExclude) -sub"/>
		<Exec Command="start $(Out)\HtmlReport\index.html"/>
	</Target>

	<Target Name="CoverageRelease" DependsOnTargets="Compile">
		<Exec Command="$(CoverageExecutable) $(TestExecutable) $(Out)\HtmlReport -i $(CoverageInclude) $(CoverageExclude) -sub"/>
		<Exec Command="start $(Out)\HtmlReport\index.html"/>
	</Target>

	<Target Name="Format">
		<PropertyGroup>
			<ClangFormat>"$(ProgramFiles)\LLVM\bin\clang-format.exe"</ClangFormat>
		</PropertyGroup>
		<ItemGroup>
			<FileToFormat Include="$(Source)/include/**/*.h"/>
			<FileToFormat Include="$(Source)/GLib/**/*.cpp"/>
			<FileToFormat Include="$(Source)/GLib/**/*.h"/>
		</ItemGroup>
		<Exec Command="$(ClangFormat) -i %(FileToFormat.Identity)"/>
	</Target>

	<ItemGroup>
		<TidyDefine Include="NDEBUG"/>
		<TidyDefine Include="_UNICODE"/>
		<TidyDefine Include="UNICODE"/>
		<TidyDefine Include="NOMINMAX"/>
		<TidyDefine Include="WIN32_LEAN_AND_MEAN"/>
		<TidyDefine Include="_WIN64"/>

		<TidyInclude Include="$(Source)\include"/>
		<TidyInclude Include="$(Boost)"/>

		<TidyIgnoreWarning Include="no-pragma-once-outside-header"/>

		<TidyCheck Include="%2A"/>
		<TidyCheck Include="-modernize-use-nodiscard"/>
		<TidyCheck Include="-llvm-header-guard"/>
		<TidyCheck Include="-llvm-namespace-comment"/>
		<TidyCheck Include="-clang-diagnostic-deprecated-declarations"/>
		<TidyCheck Include="-fuchsia-overloaded-operator"/>
		<TidyCheck Include="-fuchsia-default-arguments"/>
		<TidyCheck Include="-google-runtime-int"/>
		<TidyCheck Include="-google-runtime-references"/>
		<TidyCheck Include="-google-readability-namespace-comments"/>
		<TidyCheck Include="-google-readability-todo"/>
		<TidyCheck Include="-google-explicit-constructor"/>
		<TidyCheck Include="-hicpp-explicit-conversions"/>
	</ItemGroup>

	<PropertyGroup>
		<Tidy>"$(ProgramFiles)\LLVM\bin\clang-tidy.exe"</Tidy>
		<TidyCmd>-quiet -checks=@(TidyCheck, ',') --header-filter=^.*\\GLib\\.*$ -- -I@(TidyInclude, ' -I') -std=c++17 -D@(TidyDefine, ' -D') -x c++ -W@(TidyIgnoreWarning, ',')</TidyCmd>
	</PropertyGroup>

	<Target Name="Tidy">
		<ItemGroup>
			<FileToCheck Include="$(Source)/include/**/*.h" Exclude="$(Source)/include/GLib/CompatLinux.h"/>
			<FileToCheck Include="$(Source)/GLib/**/*.h"/>
			<FileToCheck Include="$(Source)/GLib/**/*.cpp"/>
			<FileToCheck Include="$(Source)/Coverage/**/*.cpp"/>
			<FileToCheck Include="$(Source)/Coverage/**/*.h" Exclude="$(Source)/Coverage/resource.h"/>
			<Relative Include="$([MSBuild]::MakeRelative($(Source), %(FileToCheck.FullPath)))"/>
		</ItemGroup>

		<!-- slow, split and run in parallel? or add compilation database json? -->
		<Exec Command="$(Tidy) @(Relative, ' ') $(TidyCmd)" WorkingDirectory="$(Source)"/>
	</Target>

	<Target Name="TidyTests">
		<ItemGroup>
			<FileToCheck Include="$(Source)/Tests/**/*.h"/>
			<FileToCheck Include="$(Source)/Tests/**/*.cpp"/>
			<Relative Include="$([MSBuild]::MakeRelative($(Source), %(FileToCheck.FullPath)))"/>
		</ItemGroup>

		<!-- vvslow, split and run in parallel? or add compilation database json? -->
		<Exec Command="$(Tidy) @(Relative, ' ') $(TidyCmd)" WorkingDirectory="$(Source)"/>
	</Target>

	<Target Name="TidyFile">
		<Exec Command="$(Tidy) $(FileName) $(TidyCmd)" WorkingDirectory="$(Source)"/>
	</Target>

</Project>
