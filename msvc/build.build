<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="Current">
	<Import Project="Default.props"/>
	<Import Project="docker.build"/>

	<PropertyGroup>
		<Root>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)\..'))</Root>
		<BoostBuilderVer>1.73.0</BoostBuilderVer>
		<BoostBuilderUrl>https://github.com/glen-summers/BoostModularBuild/archive/v$(BoostBuilderVer).tar.gz</BoostBuilderUrl>
		<BoostBuilderName>BoostModularBuild-$(BoostBuilderVer)</BoostBuilderName>
	</PropertyGroup>

	<PropertyGroup>
		<Solution>$(Root)\msvc\GLib.sln</Solution>
		<Source>$(Root)</Source>
		<MajorVersion>1</MajorVersion>
		<MinorVersion>0</MinorVersion>
		<FileBuildNumber>0</FileBuildNumber>
		<Configuration>Release</Configuration>
		<CMakeConfiguration>RelWithDebInfo</CMakeConfiguration>
		<Platform>x64</Platform>
		<BuildInParallel>true</BuildInParallel>
		<TestProject>Tests</TestProject>
		<ReportsRepo>https://github.com/glen-summers/reports.git</ReportsRepo>
	</PropertyGroup>

	<ItemGroup>
		<CoverageInclude Include="$(Root)"/>
		<CoverageExclude Include="$(Root)\$(TestProject)"/>
		<CoverageExclude Include="$(Root)\TestApp"/>
	</ItemGroup>

	<PropertyGroup>
		<Out>$(Root)\out</Out>
		<PlatformOut>$(Out)\$(Platform)</PlatformOut>
		<Temp>$(PlatformOut)\temp</Temp>
		<OutputPath>$(PlatformOut)\$(Configuration)</OutputPath>
		<TestExecutable>$(OutputPath)\$(TestProject).exe</TestExecutable>
		<DebugTestExecutable>$(PlatformOut)\Debug\$(TestProject).exe</DebugTestExecutable>
		<CoverageExecutable>$(OutputPath)\Coverage.exe</CoverageExecutable>
		<CoverageArgs>-i @(CoverageInclude, ' -i ') -x @(CoverageExclude, ' -x ') -sub -ws</CoverageArgs>
		<Downloads>$(Out)\downloads</Downloads>
		<VolumeShare>$(Out)\DockerShare\:/src/GLib/out</VolumeShare>
	</PropertyGroup>

	<Target Name="MakeTempDir">
		<MakeDir Directories="$(Temp)"/>
	</Target>

	<Target Name="Clean">
		<Exec Command='del /F /Q /S "$(Out)"' Condition="Exists($(Out))"/>

		<ItemGroup>
			<FileToDelete Include="$(Source)/**/Debug/**/*"/>
			<FileToDelete Include="$(Source)/**/Release/**/*"/>
			<FileToDelete Include="$(Source)/**/ipch/**/*"/>
			<FileToDelete Include="$(Source)/lib/*"/>
		</ItemGroup>
		<Delete Files="%(FileToDelete.Identity)"/>

		<ItemGroup>
			<Directories Include="$([System.IO.Directory]::GetDirectories('$(Source)', '*', System.IO.SearchOption.AllDirectories))" />
			<Directories>
				<Files>$([System.IO.Directory]::GetFiles("%(Directories.Identity)", "*", System.IO.SearchOption.AllDirectories).get_Length())</Files>
			</Directories>
		</ItemGroup>
		<RemoveDir Directories="@(Directories)" Condition="%(Files)=='0'" />
	</Target>

	<Target Name="Deps">
		<PropertyGroup>
			<BoostBuilderTar>$(Downloads)\BoostModularBuild.tar.gz</BoostBuilderTar>
			<OutDir>$(Downloads)\Deps</OutDir>
			<Go>$(Downloads)\Deps\$(BoostBuilderName)\go.cmd</Go>
		</PropertyGroup>

		<MakeDir Directories="$(OutDir)"/>
		<DownloadFile Condition="!Exists($(BoostBuilderTar))" Address="$(BoostBuilderUrl)" FileName="$(BoostBuilderTar)"/>
		<Exec Condition="!Exists('$(Go)')" Command='tar -xvzf "$(BoostBuilderTar)" -C "$(OutDir)" &gt;NUL 2&gt;&amp;1' ConsoleToMsBuild="true"/>
		<Exec Command="$(Go) build test $(Out)"/>
	</Target>

	<Target Name="Restore"/>

	<Target Name="Compile" DependsOnTargets="Restore">
		<ItemGroup>
			<Properties Remove="@(Properties)"/>
			<Properties Include="Configuration=$(Configuration)"/>
			<Properties Include="OutDir=$(OutputPath)\"/>
			<Properties Include="Platform=$(Platform)"/>
			<Properties Include="@(CustomProperties)"/>
		</ItemGroup>
		<MSBuild Projects="$(Solution)" Properties="@(Properties)" BuildInParallel="$(BuildInParallel)"/>
	</Target>

	<Target Name="CompileTests">
		<ItemGroup>
			<Properties Remove="@(Properties)"/>
			<Properties Include="Configuration=$(Configuration)"/>
			<Properties Include="OutDir=$(OutputPath)\"/>
			<Properties Include="Platform=$(Platform)"/>
			<Properties Include="@(CustomProperties)"/>
		</ItemGroup>
		<MSBuild Projects="$(Solution)" Properties="@(Properties)" Targets="Tests"/>
	</Target>

	<Target Name="Test" DependsOnTargets="Compile">
		<Exec command="$(TestExecutable)"/>
	</Target>

	<Target Name="Build" DependsOnTargets="Compile;Test"/>

	<Target Name="BuildDebug">
		<MSBuild Projects="$(MSBuildProjectFile)" Targets="Build" Properties="Configuration=Debug"/>
	</Target>

	<Target Name="BuildX86">
		<MSBuild Condition="'$(Platform)'!='x86'" Projects="$(MSBuildProjectFile)" Targets="Build" Properties="Platform=x86"/>
	</Target>

	<!--cmake-->
	<PropertyGroup>
		<CMakeRootDir>$(vsInstallationPath)\Common7\IDE\CommonExtensions\Microsoft\CMake</CMakeRootDir>
		<CMake>"$(CMakeRootDir)\CMake\bin\cmake.exe"</CMake>
		<CTest>"$(CMakeRootDir)\CMake\bin\ctest.exe"</CTest>
		<Ninja>"$(CMakeRootDir)\Ninja\ninja.exe"</Ninja>

		<CMakeBuildDir>$(Out)\cmake\build\$(Platform)-$(CMakeConfiguration)</CMakeBuildDir>
		<CMakeInstallDir>$(Out)\cmake\install\$(Platform)-$(CMakeConfiguration)</CMakeInstallDir>
	</PropertyGroup>

	<Target Name="CMake">
		<MakeDir Directories="$(CMakeBuildDir)"/>
		<Exec WorkingDirectory="$(CMakeBuildDir)" Command='
$(CMake) -G "Ninja" -DCMAKE_INSTALL_PREFIX:PATH="$(CMakeInstallDir)" -DCMAKE_BUILD_TYPE="$(CMakeConfiguration)" -DCMAKE_MAKE_PROGRAM=$(Ninja) $(Root)
$(CMake) --build . --config $(CMakeConfiguration) -- -v
set CTEST_OUTPUT_ON_FAILURE=1 &amp;&amp; $(CTest) -VV
$(CMake) --build . --config $(CMakeConfiguration) --target install
'/>
	</Target>

	<Target Name="All" DependsOnTargets="Build;BuildX86;CMake;Docker"/>

	<UsingTask TaskName="DownloadFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
		<ParameterGroup>
			<Address ParameterType="System.String" Required="true"/>
			<FileName ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Reference Include="System" />
			<Code Type="Fragment" Language="cs"><![CDATA[new System.Net.WebClient().DownloadFile(Address, FileName);]]>
			</Code>
		</Task>
	</UsingTask>

	<Target Name="Coverage" DependsOnTargets="Compile">
		<MSBuild Projects="$(MSBuildProjectFile)" Targets="CompileTests" Properties="Configuration=Debug"/>
		<Exec Command="$(CoverageExecutable) $(DebugTestExecutable) $(Out)\HtmlReport $(CoverageArgs)"/>
		<Exec Command="start $(Out)\HtmlReport\index.html"/>
	</Target>

	<Target Name="CoverageRelease" DependsOnTargets="Compile">
		<Exec Command="$(CoverageExecutable) $(TestExecutable) $(Out)\HtmlReport $(CoverageArgs)"/>
		<Exec Command="start $(Out)\HtmlReport\index.html"/>
	</Target>

	<Target Name="PushReport">
		<Exec WorkingDirectory="$(Out)\HtmlReport" Command="
git config --global user.email glen.summers@outlook.com
git config --global user.name glen-summers
git init .
git remote add origin $(ReportsRepo)
git add *
git commit --no-edit --all --verbose --message init
"/>

		<Exec Command="git push --force --verbose $(ReportsRepo)" WorkingDirectory="$(Out)\HtmlReport"/>
	</Target>

	<Target Name="Docker" DependsOnTargets="StartDocker">
		<Exec WorkingDirectory="$(Root)" Command="
docker build --file dockerFile --target glib --tag glib .
docker container run --rm -v $(VolumeShare) glib /src/GLib/go.sh
"/>
	</Target>

	<Target Name="Stop" DependsOnTargets="StopDocker"/>

	<Target Name="DockerCoverage" DependsOnTargets="StartDocker">
		<Exec WorkingDirectory="$(Root)" Command="
docker build --file dockerFile --target glib-coverage --tag glib-coverage .
docker container run --rm -v $(VolumeShare) glib-coverage /src/GLib/go.sh coverage
start $(out)\DockerShare\cmake\build\Debug\TestsCoverage\index.html
"/>
		<!-- todo copy out raw coverage files and merge with windows coverage-->
	</Target>

	<!-- fwds if exist? maybe split out-->
	<Target Name="Format">
		<MSBuild Projects="Format.build" Targets="Format" Properties="Source=$(Source)"/>
	</Target>

	<Target Name="Tidy">
		<MSBuild Projects="Tidy.build" Targets="Tidy" Properties="Source=$(Source)"/>
	</Target>

	<Target Name="TidyFile">
		<MSBuild Projects="Tidy.build" Targets="TidyFile" Properties="FileName=$(FileName);Source=$(Source)"/>
	</Target>
	<!-- fwds -->

</Project>
