<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<UsingTask TaskName="Kill" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<Name ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Using Namespace="System.Diagnostics"/>
			<Code Type="Fragment" Language="cs">
				<![CDATA[
				var ps = Process.GetProcessesByName(Name).ToList();
				ps.ForEach(p => p.Kill());
				if (ps.Count()!=0) Console.WriteLine($"Killed '{Name}'" );
				]]>
			</Code>
		</Task>
	</UsingTask>

	<UsingTask TaskName="StartExecutable" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<Name ParameterType="System.String" Required="true" />
			<Args ParameterType="System.String" Required="false" />
		</ParameterGroup>
		<Task>
			<Using Namespace="System.Diagnostics"/>
			<Using Namespace="System.Threading"/>
			<Code Type="Fragment" Language="cs">
				<![CDATA[
				if (Process.GetProcessesByName(Name).Length == 0)
				{
					Console.WriteLine($"Starting {Name} {Args}..." );
					Process.Start(Name, Args);
				}
				]]>
			</Code>
		</Task>
	</UsingTask>

	<!-- add test? -->
	<UsingTask TaskName="WaitForSuccess" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<Name ParameterType="System.String" Required="true" />
			<Args ParameterType="System.String" Required="true" />
			<WaitSeconds ParameterType="System.Int32" Required="true" />
			<TimeoutSeconds ParameterType="System.Int32" Required="true" />
			<Result ParameterType="System.Boolean" Output="true" />
		</ParameterGroup>
		<Task>
			<Using Namespace="System.Diagnostics"/>
			<Using Namespace="System.Threading"/>
			<Code Type="Fragment" Language="cs">
				<![CDATA[
var endTime = DateTime.Now + TimeSpan.FromSeconds(TimeoutSeconds);
int? exitCode = null;
String output;

Console.WriteLine($"Running : {Name} {Args}...");
for (int i=0;;++i)
{
	using (var p = new Process 
	{
		StartInfo = new ProcessStartInfo
		{
			FileName = Name, Arguments = Args, UseShellExecute = false, RedirectStandardOutput = true,
			RedirectStandardError = true, CreateNoWindow = false
		}
	})
	{
		p.Start();
		Console.WriteLine($"Waiting {i}...");
		if (p.WaitForExit(WaitSeconds*1000))
		{
			exitCode = p.ExitCode;
		}
		else
		{
			p.Kill(); // exception?
		}

		var b = new StringBuilder();
		while (!p.StandardOutput.EndOfStream)
		{
			b.AppendLine(p.StandardOutput.ReadLine());
		}
		while (!p.StandardError.EndOfStream)
		{
			b.AppendLine(p.StandardError.ReadLine());
		}
		output = b.ToString();
	}

	if (exitCode == 0)
	{
		Console.WriteLine(output);
		return Result = true;
	}

	if (DateTime.Now >= endTime)
	{
		break;
	}
	Thread.Sleep(WaitSeconds*1000);
}
Log.LogError("Retries exceeded");
Log.LogError(output);
Result = false;
				]]>
			</Code>
		</Task>
	</UsingTask>

	<UsingTask TaskName="ServiceStatus" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<Name Required="true" />
			<Status ParameterType="System.String" Output="true"/>
			<StartType ParameterType="System.String" Output="true"/>
		</ParameterGroup>
		<Task>
			<Reference Include="$(ReferenceDir)\System.dll"/>
			<Reference Include="$(ReferenceDir)\System.ServiceProcess.dll"/>

			<!--Using Namespace="System"/-->
			<Using Namespace="System.IO"/>
			<Using Namespace="System.ServiceProcess"/>
			<Code Type="Fragment" Language="cs">
				<![CDATA[
				using (var s = new ServiceController(Name))
				{
					Status = s.Status.ToString();
					StartType = s.StartType.ToString();
				};]]>
			</Code>
		</Task>
	</UsingTask>

	<UsingTask TaskName="WaitForState" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<Name Required="true" ParameterType="System.String"/>
			<State Required="true" ParameterType="System.String"/>
			<TimeoutSeconds ParameterType="System.Int32" Required="true" />
		</ParameterGroup>
		<Task>
			<Reference Include="$(ReferenceDir)\System.dll"/>
			<Reference Include="$(ReferenceDir)\System.ServiceProcess.dll"/>
			<Using Namespace="System"/>
			<Using Namespace="System.IO"/>
			<Using Namespace="System.ServiceProcess"/>
			<Code Type="Fragment" Language="cs">
				<![CDATA[
				var state = (ServiceControllerStatus) Enum.Parse(typeof(ServiceControllerStatus), State);
				using (var s = new ServiceController(Name))
				{
					s.WaitForStatus(state, TimeSpan.FromSeconds(TimeoutSeconds));
				}
				]]>
		</Code>
		</Task>
	</UsingTask>

</Project>